
package com.app.client.stubs.subscriber;

import java.util.List;
import javax.jws.Oneway;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.FaultAction;
import javax.xml.ws.Holder;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.9-b130926.1035
 * Generated source version: 2.2
 * 
 */
@WebService(name = "SubscriberService", targetNamespace = "http://service.mobile.com")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface SubscriberService {


    /**
     * 
     * @param parameters
     * @param authentication
     */
    @WebMethod(action = "delete")
    @Oneway
    @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
    @Action(input = "delete")
    public void deleteMobileSubscriber(
        @WebParam(name = "deleteMobileSubscriber", targetNamespace = "http://service.mobile.com", partName = "parameters")
        DeleteMobileSubscriber parameters,
        @WebParam(name = "authentication", targetNamespace = "http://service.mobile.com", header = true, partName = "authentication")
        AuthenticationData authentication);

    /**
     * 
     * @param subscriberInfo
     * @return
     *     returns int
     */
    @WebMethod(action = "create")
    @WebResult(name = "affectedRows", targetNamespace = "")
    @RequestWrapper(localName = "createMobileSubscriber", targetNamespace = "http://service.mobile.com", className = "com.app.client.stubs.subscriber.CreateMobileSubscriber")
    @ResponseWrapper(localName = "createMobileSubscriberResponse", targetNamespace = "http://service.mobile.com", className = "com.app.client.stubs.subscriber.CreateMobileSubscriberResponse")
    @Action(input = "create", output = "http://service.mobile.com/SubscriberService/createMobileSubscriberResponse")
    public int createMobileSubscriber(
        @WebParam(name = "SubscriberInfo", targetNamespace = "")
        Subscriber subscriberInfo);

    /**
     * 
     * @param msisdn
     * @return
     *     returns com.app.client.stubs.subscriber.Subscriber
     */
    @WebMethod(action = "get")
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getMobileSubscriberByMSISDN", targetNamespace = "http://service.mobile.com", className = "com.app.client.stubs.subscriber.GetMobileSubscriberByMSISDN")
    @ResponseWrapper(localName = "getMobileSubscriberByMSISDNResponse", targetNamespace = "http://service.mobile.com", className = "com.app.client.stubs.subscriber.GetMobileSubscriberByMSISDNResponse")
    @Action(input = "get", output = "http://service.mobile.com/SubscriberService/getMobileSubscriberByMSISDNResponse")
    public Subscriber getMobileSubscriberByMSISDN(
        @WebParam(name = "msisdn", targetNamespace = "")
        String msisdn);

    /**
     * 
     * @param password
     * @param parameters
     * @param username
     * @param timestamp
     * @return
     *     returns com.app.client.stubs.subscriber.PerformBatchOperationResponse
     */
    @WebMethod
    @WebResult(name = "performBatchOperationResponse", targetNamespace = "http://service.mobile.com", partName = "result")
    @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
    @Action(input = "http://service.mobile.com/SubscriberService/performBatchOperationRequest", output = "http://service.mobile.com/SubscriberService/performBatchOperationResponse")
    public PerformBatchOperationResponse performBatchOperation(
        @WebParam(name = "performBatchOperation", targetNamespace = "http://service.mobile.com", partName = "parameters")
        PerformBatchOperation parameters,
        @WebParam(name = "username", targetNamespace = "http://service.mobile.com", header = true, mode = WebParam.Mode.INOUT, partName = "username")
        Holder<String> username,
        @WebParam(name = "password", targetNamespace = "http://service.mobile.com", header = true, partName = "password")
        String password,
        @WebParam(name = "timestamp", targetNamespace = "http://service.mobile.com", header = true, mode = WebParam.Mode.OUT, partName = "timestamp")
        Holder<String> timestamp);

    /**
     * 
     * @return
     *     returns java.util.List<com.app.client.stubs.subscriber.Subscriber>
     */
    @WebMethod(action = "get")
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAllMobileSubscribers", targetNamespace = "http://service.mobile.com", className = "com.app.client.stubs.subscriber.GetAllMobileSubscribers")
    @ResponseWrapper(localName = "getAllMobileSubscribersResponse", targetNamespace = "http://service.mobile.com", className = "com.app.client.stubs.subscriber.GetAllMobileSubscribersResponse")
    @Action(input = "get", output = "http://service.mobile.com/SubscriberService/getAllMobileSubscribersResponse")
    public List<Subscriber> getAllMobileSubscribers();

    /**
     * 
     * @param imsi
     * @return
     *     returns com.app.client.stubs.subscriber.Subscriber
     * @throws SubscriberNotFoundException_Exception
     */
    @WebMethod(action = "get")
    @WebResult(name = "Subscriber", targetNamespace = "")
    @RequestWrapper(localName = "getMobileSubscriberByIMSI", targetNamespace = "http://service.mobile.com", className = "com.app.client.stubs.subscriber.GetMobileSubscriberByIMSI")
    @ResponseWrapper(localName = "getMobileSubscriberByIMSIResponse", targetNamespace = "http://service.mobile.com", className = "com.app.client.stubs.subscriber.GetMobileSubscriberByIMSIResponse")
    @Action(input = "get", output = "http://service.mobile.com/SubscriberService/getMobileSubscriberByIMSIResponse", fault = {
        @FaultAction(className = SubscriberNotFoundException_Exception.class, value = "http://service.mobile.com/SubscriberService/getMobileSubscriberByIMSI/Fault/SubscriberNotFoundException")
    })
    public Subscriber getMobileSubscriberByIMSI(
        @WebParam(name = "imsi", targetNamespace = "")
        String imsi)
        throws SubscriberNotFoundException_Exception
    ;

}
