192.168.182.128
santanu/5056
Link: https://www.youtube.com/watch?v=fqMOX6JJhGo (watched till 00:58:00)
------------------------------------------------------------------------------------------------------------------------------------------------------------------
install docker:
	uninstall previous versions:
	sudo apt-get remove docker docker-engine docker.io containerd runc
	
	install docker:
	curl -fsSL https://get.docker.com -o get-docker.sh
	sudo sh get-docker.sh
	docker --version
------------------------------------------------------------------------------------------------------------------------------------------------------------------
run container:
	run directly:
	- attached mode:
	docker run docker/whalesay cowsay "Hello From Docker!"
	- detached mode:
	docker run -d docker/whalesay cowsay "Hello From Docker!"
	- interactive mode:
	docker run -d docker/whalesay cowsay "Hello From Docker!"
	- port forward (container port 5000 mapped to host port 1001):
	docker run -p 1001:5000 kodekloud/webapp
	- data mount (volume mapping):
	docker run -v /opt/datadir:/var/lib/mysql mysql
	
	attach later:
	docker attach dd60fed9cedb
	
	create container and start:
	docker container create -it docker/whalesay cowsay "Hello From Docker!"
	docker container start <container_id>
	or
	docker run -it <container_id>

list containers:
	all containers: [both will work]
	docker container ls -a
	docker ps -a
	
	only running containers: [both will work]
	docker container ls
	docker ps

docker shell:
	enter:
	docker container exec -it <container_id> sh
	exit: control + p + q

docker container logs:
	docker logs <container_id>
	
environment variable:
docker run -e paramname=value image_name

stop docker:
docker container stop <container_id>

remove docker command:
docker container rm -f <container_id>

docker configuration:
/var/lib/docker/containers/<container_id>/config.v2.json

create images:
use Dockerfile
https://docs.docker.com/engine/reference/builder/
	FROM
	RUN
	ENV
	WORKDIR
	ADD
	COPY
	CMD
	ENTRYPOINT
	EXPOSE
	LABEL
	STOPSIGNAL
	USER
	VOLUME
	ONBUILD
https://docs.docker.com/develop/develop-images/dockerfile_best-practices/
docker build . -t webserver


push image in public registry:
docker push username/webserver

layers in images:
docker history image_name

list images:
docker image ls

remove a image:
docker rmi <image_id>

docker build . -t webserver
docker run --network=none -it -p 1001:37999 -v /workspace/simple-web-server/tmp:/webserver/tmp -e app_port=37999 webserver
docker container exec -it 61374bb9c4de sh


https://ubuntu.com/tutorials/install-a-local-kubernetes-with-microk8s#1-overview
https://microk8s.io/docs
------------------------------------------------------------------------------------------------------------------------------------------------------------------
CMD and ENTRYPOINT:
1. docker run ubuntu sleep 5 [sleep 5 will be executed after container creation]
2. FROM Ubuntu [does not require command in command line as it is in docker file]
CMD sleep 5 | CMD ["sleep", "5"]
3. From Ubuntu [will execute sleep from the parameter passed in container run command. if parameter not passed, will take 5 from CMD]
ENTRYPOINT["sleep"]
CMD ["5"]

ENTRYPOINT
CMD
ENTRYPOINT + CMD
override ENTRYPOINT:
docker run --entrypoint newcommand myapp 10 [newcommand is the new entry point command, 10 is the argument]
------------------------------------------------------------------------------------------------------------------------------------------------------------------
Docker Networking:
type of networks: bridge, none, host

docker run --network=host -it -p 1001:37999 -v /workspace/simple-web-server/tmp:/webserver/tmp -e app_port=37999 webserver

Create new network: docker network create --driver bridge --subnet 182.18.0.0/16 custom-isolated-network
------------------------------------------------------------------------------------------------------------------------------------------------------------------
Docker Storage:
docker volume create subscriber_data
volume mount:	docker run --network=host -it -p 1001:37999 -v subscriber_data:/webserver/tmp -e app_port=37999 webserver
bind mount:		docker run --network=none -it -p 1001:37999 -v /workspace/simple-web-server/tmp:/webserver/tmp -e app_port=37999 --name=mywebserver webserver
instead of -v use --mount
docker run --mount type=bind,source=/workspace/simple-web-server/tmp, target=/webserver/tmp webserver
Drivers: AUFS, ZFS, BTRFS, Device Mapper, Overlay, Overlay2
------------------------------------------------------------------------------------------------------------------------------------------------------------------
Docker Compose:
docker-compose.yml
services:
	web:
		image:"webserver"
	database:
		image:"mysql"
	messaging:
		image:"redis:alpine"

docker-compose up
------------------------------------------------------------------------------------------------------------------------------------------------------------------
docker run -d --name=redis redis
docker run -d --name=db postgres:9.4
docker run -d --name=vote -p 5000:80 --link redis:redis voting-app
docker run -d --name=result -p 5001:80 --link db:db result-app
docker run -d --name=worker --link db:db --link redis:redis worker

services:
	redis:
		image: redis
	db:
		image: postgres:9.4
	vote:
		image: voting-app			build: ./vote
		ports:
			- 5000:80
		links:
			- redis
	result:
		image: result-app			build: ./result
		ports:
			- 5001:80
		links:
			- db
	worker:
		image: worker				build: ./worker
		links:
			- db
			- redis
docker compose up					docker compose build

define networks
------------------------------------------------------------------------------------------------------------------------------------------------------------------
Docker registry: Private registry:
docker run -d -p 5000:5000 registry registry:2
docker image tag webserver localhost:5000/webserver
docker push localhost:5000/webserver
docker pull localhost:5000/webserver
------------------------------------------------------------------------------------------------------------------------------------------------------------------
container resource utilization: [cgroups]
docker run --cpus=.5 --memory=100m ubuntu
------------------------------------------------------------------------------------------------------------------------------------------------------------------
docker service create --replicas=100 nodejs