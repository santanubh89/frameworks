Basic Commands:
Run an application:	kubectl run hello-minikube
Get Cluster Info:	kubectl cluster-info
Get Node Info:		kubectl get nodes
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
YAML file structure:
apiVersion:
kind:
metadata:
spec:
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Pods: Running containerized application
Create:		kubectl create -f pod.yaml
Delete:		kubectl delete -f pod.yaml
Read:		kubectl get pods -o wide
Describe:	kubectl describe <podname>
Edit:		kubectl edit <podname>
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Replication Controller: Ensuring number of instances, scaling
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Replica Sets: Ensuring number of instances, scaling
Create Replica Set:	kubectl create -f replicaset-definition.yaml
Get Replica Set:	kubectl get replicaset
Delete Replica Set: kubectl delete replicaset myapp-replicaset
Scale Replica Set:	kubectl replace -f replicaset-definition.yaml
Scale Replica Set:	kubectl scale -f replicaset-definition.yaml -replicas=6
Scale Replica Set:	kubectl scale replicaset -replicas=6 nginx-rs
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Deployments: Replication, upgrade, rollback, scaling, pause/resume
Deployment Types:
	- Recreate: Undeploy old version, deploy new version
	- Rolling Update: Deploy one instance after another (Default)
	- Canary: Gradual shift of traffic
	- Blue/Green: New version gets deployed first, traffic is switched, after that new version gets undeployed

Create Deployment:		kubectl create -f nginx-deploy.yaml
Get Deployment: 		kubectl get deploy -l app=nginx-app	
Get Replica Sets:		kubectl get rs -l app=nginx-app
Get Pods:				kubectl get pods -l app=nginx-app
Describe Deployments:	kubectl describe deploy nginx-deploy

Update deployment:		kubectl set image deploy nginx-deploy nginx-container=nginx:1.9.1 --record
						kubectl edit deploy nginx-deploy
Rollout Status:			kubectl rollout status deployment/nginx-deploy
Rollout History:		kubectl rollout history deployment/nginx-deploy
Undo Deployment:		kubectl rollout undo deployment/nginx-deploy
Scale up/down:			kubectl scale deployment nginx-deploy --replicas=5
Delete Deployments:		kubectl delete -f nginx-deploy.yaml
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Stateful Sets: Ensures ordered naming
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Services: Enable communication between various components, within and outside application.
	NodePort: Makes one internal pod accessible on a port on the node. Mapping of a port on the node (NodePort) to a port on the pod (TargetPort).
	ClusterIP: Creates a virtual IP inside the cluster to enable communication between different services
	Load Balancer: Distribute load across different servers
Create Service:			kubectl create -f service-definition.yaml
Get services:			kubectl get service
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Config Map: Stores configurable data
kubectl create configmap app-config --from-literal=PARAM1=value1 --from-literal=PARAM2=value2
kubectl create configmap app-config --from-file=appconfig.properties
kubectl create secret generic app-secret --from-literal=PARAM1=value1 --from-literal=PARAM2=value2
kubectl create secret genetic app-secret --from-file=appsecret .properties